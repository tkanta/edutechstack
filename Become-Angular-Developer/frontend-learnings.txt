
===========================  cheetsheet : ==================================


OWASP Cheat Sheet:
	https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html			


html chars:
	https://html.spec.whatwg.org/multipage/named-characters.html

RxJs:
	https://rxjs.dev/ (library)
	https://rxjs.dev/api?type=function (operators)
	https://rxjs.dev/deprecations/subscribe-arguments (subscription)




=========================== Setup Project ============================

1. Install Angular CLI
	https://www.knowledgehut.com/blog/web-development/install-angular-cli
		npm install –g @angular/cli

	npm update if required:
		npm install -g npm@10.3.0

	uninstall angular/cli
		npm uninstall –g @angular/cli
		npm cache clean
		npm cache clean --force
		npm cache verify	

2. Install new project
	ng new reverse-phrase

3. start/stop server
	npm start
	ng serve			

===================== CLI commands ===========================

* ng new website
	- create a new project

* ng new website --routing
	- During the setup process, the CLI will ask you about the default settings for the project. Typically, it will ask if you’d like to add routing. By adding the --routing option, it will skip this question and automatically install routing for you. As for the rest of the settings, you can go with the default.Alternatively, you can just run the command without the --routing option. You can select to have routing installed during the setup. They both result in the same thing.

* ng generate module <name>

* ng generate module home --routing
	- generate home and its corresponding routing module under home folder	
		* home.module.ts
		* home-routing.module.ts

* ng generate component home/home-main
	 - create a home-main component under home module

* ng generate component post
	- This will generate the four files necessary for a component. In the src/app directory, there will be a new directory, called post, with four files called post.component.ts, post.component.html, post.component.css, and post.component.spec.ts.
	- Invoke it inside root folder and angular will autometically creates it inside src/app folder

* ng generate pipe double
	* We can move the two generated file to a separete folder and import it into app.module.ts file
	* The ng generate pipe <name> command will create two files in the src/app directory: double.pipe.spec.ts and double.pipe.ts. The double.pipe.spec.ts file is for testing the pipe. The double.pipe.ts file is where we’ll write the logic for the pipe.


* npx browserslist 
	-  following command to get the list of browsers the configuration will support
	
==================== Form Submission prevent default =================================

* If the form is submitted, we’ll run a function called onSubmit(). Every time we listen to an event, we’ll be provided an object called $event. The $event object is the regular event object in JavaScript. We’re passing it to the function because we want to be able to stop the default behavior of refreshing the page.

onSubmit(e: Event) {
    e.preventDefault();
    this.toggleModal = !this.toggleModal;
  }




====================== Angular lifecycle hooks: ===================

https://angular.io/guide/lifecycle-hooks	

ngOnInit(): This gets called when the component is initialized. We’ll have access to the component’s properties and methods. This includes the element.
ngOnDestroy(): This gets called before Angular destroys (removes) a component. (e.g.: when we navigate to a different route).
ngOnChanges(): This gets called whenever any of the properties of the component is updated. This includes data passed down from the parent component.

================== Lazy Loading ===================================

https://angular.io/guide/lazy-loading-ngmodules

===================== Modals : ==============================
	https://getbootstrap.com/docs/5.0/components/modal/	


================== Pipes list ================================

https://angular.io/api?type=pipe
https://angular.io/api/common/JsonPipe.

pipes:
	titlecase
	json


=================== Basic structure ========================

1. app.module.ts contains all components
2. environment folder contains basic and production environment files
3. main.ts runs the app.module


========================= property binding =============================

* property-value-does-not-exist-on-type-eventtarget-in-typescript

	event.target here is an HTMLElement which is the parent of all HTML elements, but isn't guaranteed to have the property value. TypeScript detects this and throws the error. Cast event.target to the appropriate HTML element to ensure it is HTMLInputElement which does have a value property:
		(event.target as HTMLInputElement).value	

		sample error snippet:
			<input (input)="onInputText($event.target.value)" />


=================== Observable sample ===========================

export class CocktailService {

  constructor(private http: HttpClient) { }

  public search(query: string){
    return this.http.get<CocktailResponse>('https://www.thecocktaildb.com/api/json/v1/1/search.php', {params:{s: query}}).pipe(pluck('drinks'));
  }
}
-----------------
search(query: string){
    this.query = query;
    this.cocktail.search(query).subscribe( { next: (response: any) => {
      console.log('--------> ',response);
      this.drinks = response;
    },
    error: (err) => {
      console.log(err)
    },
    complete: () => {
      console.log('completed!')
    }});
    
  }

