
------------------- docs ------------------------

k8s podSpec guide:
	https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#pod-v1-core
	https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#podspec-v1-core

	** Containers are only ever created within the context of a Pod. This is usually done using a Controller. See Controllers: Deployment, Job, or StatefulSet
	deployement controller:
		https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#deployment-v1-apps

Replicaset Guide:
	https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#replicaset-v1-apps

	
------------------- Commands: --------------------


deployment details:
	kubectl get -f go-demo-2.yml ( get details of deployment, service etc)
	kubectl get deployments --show-labels
	kubectl get deployments -l type=db,vendor=MongoLabs

Run / Delete POD:
	kubectl run db --image mongo
	kubectl delete pod db
	kubectl delete -f go-demo-2.yml --cascade=orphan (delete only replica set not the pods)
	kubectl delete $POD_NAME

POD details:
	kubectl create -f db.yml
	kubectl get pods
	kubectl get pods -o wide
	kubectl get pods -o json
	kubectl get pods -o yaml
	kubectl describe pod db	
	kubectl get events
	kubectl get -f go-demo-2.yml -o jsonpath="{.spec.containers[*].name}"
	kubectl get -f go-demo-2.yml -o json

POD run / delete:
	kubectl describe -f db.yml
	kubectl exec db -- ps aux (short lived command execution)
	kubectl exec -it db -- sh (long lived command execution)
		echo 'db.stats()' | mongo localhost:27017/test
		exit
	kubectl logs -f db (-f : followup logs)
	kubectl exec db --  pkill mongod
	kubectl get pods
	kubectl delete -f db.yml 
	kubectl get pods
	kubectl run docker --image=docker:17.11  --restart=Never docker image ls	

POD describe:
	kubectl describe -f db.yml
	kubectl describe pod <podName>
	kubectl exec db -- ps aux (run onetime command in containers of pod)
	echo 'db.stats()' | mongo localhost:27017/test (execute mongodb stats after connecting to mongo)

POD label:
	POD_NAME=$(kubectl get pods -o name | tail -1)
	kubectl label $POD_NAME service-	      (delete label)
	kubectl label $POD_NAME service=go-demo-2 (add label)
	kubectl get pods --show-labels

replicaset:
	kubectl get rs (get replicate sets)	

service:
	exposing replicaset as service:
		kubectl expose rs go-demo-2 \
	    --name=go-demo-2-svc \
	    --target-port=28017 \
	    --type=NodePort

	describe service:
		kubectl describe svc/go-demo-2-svc
		kubectl get svc go-demo-2-api -o yaml

	service port forward:
		kubectl port-forward service/go-demo-2-api 3000:8080 --address 0.0.0.0
		curl -i "0.0.0.0:3000/demo/hello"

	sevice info:
		kubectl get svc go-demo-2-api -o yaml	

Get Pod Name:
	POD_NAME=$(kubectl get pod --no-headers -o=custom-columns=NAME:.metadata.name -l type=db,service=go-demo-2 | tail -1)	

Get IP/port:
	IP=$(minikube ip)
	PORT=$(kubectl get svc go-demo-2-api -o jsonpath="{.spec.ports[0].nodePort}")
	curl -i "http://$IP:$PORT/demo/hello"

rolling update:
	kubectl create -f go-demo-2-api.yml --record
	kubectl set image -f go-demo-2-api.yml api=vfarcic/go-demo-2:2.0
	kubectl set image -f go-demo-2-db.yml db=mongo:3.4 --record (update image name db with new version)
	kubectl set image deployments -l type=db,vendor=MongoLabs db=mongo:3.4 --record ( update multiple objects)
	
	kubectl rollout status deployment go-demo-2-api
	kubectl rollout status deploy prometheus
	
	kubectl rollout history -f go-demo-2-api.yml
	kubectl rollout history deployment go-demo-2-api

scale replica:	
	kubectl scale deployment go-demo-2-api --replicas 8 --record


endpoint:
	kubectl get ep go-demo-2 -o yaml (describe endpoint)

port forwarding to service:
	- kubectl port-forward service/go-demo-2-svc 3000:28017 --address 0.0.0.0	
	- nohup kubectl port-forward service/go-demo-2-api --address 0.0.0.0  3000:8080 > /dev/null 2>&1 &	    
	- nohup kubectl port-forward -n ingress-nginx service/ingress-nginx-controller 3000:80 --address 0.0.0.0 > /dev/null 2>&1 &


ingress:
	* kubectl get ing --all-namespaces
	* The Ingress "default" label must consist of lower case alphanumeric characters or '-', start with an alphabetic character, and end with an alphanumeric character (e.g. 'my-name',  or 'abc-123', regex used for validation is '[a-z]([-a-z0-9]*[a-z0-9])?'

ingress controller:
	kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.0/deploy/static/provider/cloud/deploy.yaml (k3d)


formatting:
	kubectl exec -it docker -- docker image ls --format "{{.Repository}}"

Docker:
	- docker system prune -f (The docker system prune command removes all unused resources. At least, all those created and unused by Docker)
	- https://docs.docker.com/build/building/multi-stage/ 


Running deployement from stdin:
	cat volume/prometheus.yml | sed -e "s/192.168.99.100/$(minikube ip)/g" | kubectl create -f -  --record --save-config
	* Please note that, this time, the create command has dash (-) instead of the path to the file. Thatâ€™s an indication that stdin should be used instead.
	- kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.0/deploy/static/provider/cloud/deploy.yaml (k3d)
	- nohup kubectl port-forward -n ingress-nginx service/ingress-nginx-controller 3000:80 --address 0.0.0.0  > /dev/null 2>&1 &
	- kubectl get svc -n ingress-nginx
	- kubectl get pods -n ingress-nginx

Difference:
	apply vs create:
		- The apply command automatically saves the configuration so that we can edit it later on. The create command does not do such thing by default so we had to save it with --save-config.	