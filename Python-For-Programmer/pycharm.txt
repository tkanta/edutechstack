

================= System Python ===================

C:\Python\Python37-32

============================== pycharm IDE ============================================

Create Python Project:
	- https://www.jetbrains.com/pycharm/ (download community edition of Jetbrain PyCharm)
	- https://www.jetbrains.com/help/pycharm/creating-and-running-your-first-python-project.html#summary
	- https://www.simplilearn.com/tutorials/python-tutorial/pycharm#:~:text=To%20install%20NumPy%20on%20PyCharm,package%20and%20click%20Install%20Package.

Virtual ENV:
	- venv (for Python 3) and virtualenv (for Python 2) allow you to manage separate package installations for different projects. They essentially allow you to create a “virtual” isolated Python installation and install packages into that virtual installation
	- virtualenv avoids the need to install Python packages globally. When a virtualenv is active, pip will install packages within the environment, which does not affect the base Python installation in any way.
	- https://stackoverflow.com/questions/41972261/what-is-a-virtualenv-and-why-should-i-use-one ****

project setup:
	- open pycharm
	- select new project (project name is folder name)
	- select path for project folder
	- select path for venv
	- select default python runtime
	- create project
	- .idea folder will be created inside the project folder



============================ shortcuts ===========================================

Find and replace :
	Press ->Ctrl->F-> to display the search bar. Press ->Ctrl->R-> to add another field where you can type the replace string.
	In the Find in Files dialog, you can switch to replace by pressing ->Ctrl->Shift->R->. Similarly, press ->Ctrl->Shift->F-> to hide the Replace with field and switch to regular search.

Code completion:
	When using code completion, you can accept the currently highlighted selection in the popup list by pressing Tab.
	Unlike accepting with Enter, the selected name will overwrite the rest of the name to the right of the caret. This can be especially useful for replacing one method or variable name with another. 

Extract Variable refactoring:
	The Extract Variable refactoring wraps a selected expression into a variable. It adds a new variable declaration and uses the expression as an initializer. Select an expression and press ->Ctrl->Alt->V-> (Refactor | Extract/Introduce | Variable).


Show parameter info
	If the caret is positioned between the parentheses of a method call, press ->Ctrl->P-> to bring up a list of valid parameters.

Surround code fragments
	You can quickly wrap a code block in useful constructs. Select it in the editor and press ->Ctrl->Alt->T-> (Code | Surround With).
The list of available options or wrappers is context-sensitive and depends on the language. For example, you can surround ->html-> blocks with tags, and so on. 


Find Action
	To quickly find a menu command, setting, or an action, press ->Ctrl->Shift->A-> (Help | Find Action).


Camel case in code completion
	You can narrow down a list of code completion suggestions by using camel case prefixes.


Live templates
	Use live templates to insert frequent code constructs. When you select a live template from the suggestion list, the template expands to the variant that is defined on the Editor | Live Templates page of the Settings/Preferences dialog (->Ctrl->Alt->S->).se ->Tab-> to move between the template fields.


Select In
	To quickly select the currently edited element (a class, file, method, or field) in another view, press ->Alt->F1-> or call Navigate | Select In.


To quickly open any class in the editor, press ->Ctrl->N-> (Navigate | Class) and start typing the name of the class. Then, click the class from the suggestion list.

Comment and uncomment code
	Use shortcuts to comment and uncomment lines and blocks of code:
	•  Ctrl->Slash->: for single line comments (->//...->)
	•  Ctrl->Shift->Slash->: for block comments (->/*...*/->)

Navigate to declaration
	To navigate to the declaration of a class, method, or variable from its usage, place the caret at the symbol and press ->Ctrl->B-> (Navigate | Declaration or Usages). You can also click a usage with the ->Ctrl-> key pressed to jump to the declaration. 

Speed search in tree views
	Speed search is available in all tree views, for example, in the Project tool window. Start typing, and you'll quickly locate the necessary item.

Search Everywhere
	Press ->Shift-> twice to search for files, actions, symbols, UI elements, Git branches and comments across your project. Pressing double ->Shift-> again, will extend the search to non-project items.
	Use tabs or direct shortcuts ->Ctrl->N-> for classes, ->Ctrl->Shift->N-> for files, ->Ctrl->Alt->Shift->N-> for symbols, and ->Ctrl->Shift->A-> for actions to narrow your search results.

Expand code selection
	Press ->Ctrl->W-> to expand code selection. Each time you press ->Ctrl->W->, the selection expands to other areas of code.
	For example, the selection expands from a method name to the expression calling this method, then to the whole statement, then to the containing block, and so on.



Show usages
	You can view the list of all usages of a class, method or variable across the whole project, and quickly navigate to the selected item. Place the caret at a symbol and press ->Ctrl->Alt->F7-> (Edit | Find Usages | Show Usages).
	To jump to a usage, select it from the list and press ->↩ Enter->.

Preview search results
	You can use the Preview area of the Find in Files dialog (->Ctrl->Shift->F->) for quicker search without leaving the dialog. The Preview dialog displays the first 100 results. 



To quickly see the documentation for a class or method at the caret, press ->Ctrl->Q-> (View | Quick Documentation).